{"version":3,"sources":["components/home/Home.tsx","components/imageQuestion/images/cup.png","components/imageQuestion/images/keys.png","components/imageQuestion/images/bird.png","redux/patients.ts","components/imageQuestion/ImageQuestion.tsx","components/newPatient/NewPatient.tsx","components/binaryChoice/BinaryChoice.tsx","components/patientStatus/PatientStatus.tsx","components/question/Question.tsx","components/patientList/PatientList.tsx","components/patientReport/PatientReport.tsx","components/setReminder/SetReminder.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","redux/configureStore.ts","index.tsx"],"names":["Home","props","onClick","event","preventDefault","currentTarget","dataset","path","navigate","className","modifier","data-path","ADD_PATIENT","UPDATE_PATIENT","SELECT_PATIENT","DELETE_PATIENT","SET_PATIENT_PICTURE_SCORE","SET_PATIENT_TIMER","initialState","patients","currentPatient","reducer","state","action","newState","Object","assign","type","index","length","slice","value","console","log","nvalue","updatedPatient","pictures","alarmTime","Date","now","getTime","reminder","localStorage","setItem","JSON","stringify","ImageBlock","label","image","respond","callback","useState","selected","setSelected","src","alt","ImageQuestion","dispatch","useDispatch","score","setScore","next","prev","Math","min","max","cup","keys","bird","NewPatient","name","location","questions","patient","setPatient","float","onChange","target","placeholder","BinaryChoice","val","yesclass","noclass","size","default","icon","PatientStatus","useSelector","map","q","idx","YesNoQuestion","question","answer","id","text","hint","v","Questions","initialQuestions","Array","response","setResponse","setQuestion","newResponse","PatientList","dataSource","renderRow","row","toFixed","PatientReport","SetReminder","setTimer","minutes","width","App","renderToolbar","to","Boolean","window","hostname","match","preloadedState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createStoreWithMiddleware","applyMiddleware","createStore","persistedStateString","getItem","parse","store","patientReducer","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab87ca58.chunk.js","sourcesContent":["import React from 'react';\nimport { RouteComponentProps, navigate} from \"@reach/router\"\nimport {Button, Card} from 'react-onsenui';\nimport './Home.css';\n\nfunction Home(props: RouteComponentProps) {\n\n    const onClick = (event: React.MouseEvent<HTMLElement>) => {\n        event.preventDefault();\n        if (event.currentTarget.dataset.path) {\n            navigate(event.currentTarget.dataset.path);\n        }\n    };\n\n  return (\n    <div className=\"Home\">\n        <Card >\n            <div className='title'>\n            <Button onClick={onClick} modifier='large-cta' data-path=\"/newpatient\">New Patient</Button>\n            </div>\n            <div className='content'>\n            <p>Start an assessment of a new patient.</p>\n            </div>\n        </Card>\n        <Card >\n            <div className='title'>\n            <Button onClick={onClick} modifier='large-cta' data-path='/listpatients'>Review Patients</Button>\n            </div>\n            <div className='content'>\n            <p>Review results from previous patients.</p>\n            </div>\n        </Card>\n    </div>\n  );\n}\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/cup.56864a7c.png\";","export default __webpack_public_path__ + \"static/media/keys.6b0d9638.png\";","export default __webpack_public_path__ + \"static/media/bird.cfd081bf.png\";","import {Patient, StateType, ActionType} from '../types'\n\nconst ADD_PATIENT = 'ADD_PATIENT';\nconst UPDATE_PATIENT = 'UPDATE_PATIENT';\nconst SELECT_PATIENT = 'SELECT_PATIENT';\nconst DELETE_PATIENT = 'DELETE_PATIENT';\nconst SET_PATIENT_PICTURE_SCORE = 'SET_PATIENT_PICTURE_SCORE';\nconst SET_PATIENT_TIMER = 'SET_PATIENT_TIMER';\n\nexport function selectPatient(index: number) : ActionType {\n  return {\n    type: SELECT_PATIENT,\n    index\n  }\n}\n\nexport function deletePatient(index: number) : ActionType {\n  return {\n    type: DELETE_PATIENT,\n    index\n  }\n}\n\nexport function updatePatient(value: Patient) : ActionType {\n  return {\n    type: UPDATE_PATIENT,\n    value\n  };\n}\n\nexport function setPatientPictureScore(nvalue: number) : ActionType {\n    return {\n        type: SET_PATIENT_PICTURE_SCORE,\n        nvalue\n    }\n}\n\nexport function setPatientTimer(nvalue: number) : ActionType {\n    return {\n        type: SET_PATIENT_TIMER,\n        nvalue\n    }\n}\n\nexport function addPatient(value: Patient) : ActionType {\n  return {\n    type: ADD_PATIENT,\n    value\n  }\n}\n\nconst initialState: StateType = {\n  patients: [],\n  currentPatient: -1\n};\n\nexport default function reducer(state: StateType = initialState, \n                                action: ActionType) {\n\n    let newState: StateType = Object.assign({}, state);\n    switch (action.type){\n    case UPDATE_PATIENT:\n        if (typeof(action.index) === \"number\" && action.index >= 0 && action.index < state.patients.length) {\n            newState =  Object.assign(\n                {},\n                state,\n                {\n                    patients: [\n                        ...state.patients.slice(0, action.index),\n                        action.value,\n                        ...state.patients.slice(action.index+1)\n                    ]\n                }\n                );\n            }\n            break; \n    case ADD_PATIENT:\n        newState = Object.assign(\n            {},\n            state,\n            {\n                patients: [...state.patients, action.value],\n                currentPatient: state.patients.length  // index of newly inserted element\n            }\n            );\n        break;\n    case SELECT_PATIENT:  // make the patient at index be the current patient\n        if (typeof(action.index) === \"number\" && action.index >= 0 && action.index < state.patients.length) {\n            newState = Object.assign(\n                {},\n                state,\n                {\n                    currentPatient: action.index\n                }\n                );\n            } else {\n                console.log(\"SELECT_PATIENT out of range\", action.index, state.patients.length)\n            }\n        break;\n    case DELETE_PATIENT:\n        if (typeof(action.index) === \"number\"  && action.index >= 0 && action.index < state.patients.length) {\n            newState = Object.assign(\n                {},\n                state,\n                {\n                    patients: [\n                    ...state.patients.slice(0, action.index),\n                    ...state.patients.slice(action.index+1)\n                    ]\n                }\n                );\n        }\n        break;\n    case SET_PATIENT_PICTURE_SCORE:\n        if (state.currentPatient >= 0) {\n            if (typeof(action.nvalue) === \"number\" ) {\n                const updatedPatient = Object.assign(\n                    {},\n                    state.patients[state.currentPatient],\n                    {\n                        pictures: action.nvalue \n                    }\n                );\n\n                newState = Object.assign(\n                    {},\n                    state,\n                    {\n                        patients: [\n                            ...state.patients.slice(0, state.currentPatient),\n                            updatedPatient,\n                            ...state.patients.slice(state.currentPatient+1)\n                        ]\n                    }\n                );\n            }\n        }\n        break;\n    case SET_PATIENT_TIMER:\n        if (state.currentPatient >= 0) {\n            if (typeof(action.nvalue) === \"number\" ) {\n                let alarmTime = 0;\n                if (action.nvalue !== 0) {\n                    alarmTime = (new Date(Date.now() + action.nvalue * 60 * 1000)).getTime();\n                }\n\n                const updatedPatient = Object.assign(\n                    {},\n                    state.patients[state.currentPatient],\n                    {\n                        reminder: alarmTime\n                    }\n                );\n\n                newState = Object.assign(\n                    {},\n                    state,\n                    {\n                        patients: [\n                            ...state.patients.slice(0, state.currentPatient),\n                            updatedPatient,\n                            ...state.patients.slice(state.currentPatient+1)\n                        ]\n                    }\n                );\n            }\n        }\n        break;\n    }\n\n  // update localStorage\n  localStorage.setItem('state', JSON.stringify(newState));\n\n  return newState;\n}\n\n","import {useState} from 'react';\nimport {Button, Row, Col} from 'react-onsenui';\nimport {RouteComponentProps} from '@reach/router';\nimport './ImageQuestion.css';\nimport cup from './images/cup.png';\nimport keys from './images/keys.png';\nimport bird from './images/bird.png';\nimport { navigate } from '@reach/router';\n\nimport {useDispatch} from 'react-redux';\nimport * as actions from '../../redux/patients';\n\nconst ImageBlock = ({label, image, respond, callback}: any) => {\n\n    const [selected, setSelected] = useState(false);\n\n    const onClick = () => {\n        if (respond) {\n            console.log(label, !selected);\n            callback(!selected);\n            setSelected(!selected);\n        }\n    }\n\n    let className = 'image';\n    if (selected) {\n        className += ' selected';\n    }\n\n    return (                \n    <div className={className} onClick={onClick}>\n        <img src={image} alt={label}></img>\n    </div>\n    )\n}\n\ninterface ImageQuestionProps extends RouteComponentProps {\n    respond: boolean\n}\n\nconst ImageQuestion = ({respond}: ImageQuestionProps) => {\n\n    const dispatch = useDispatch();\n    const [score, setScore] = useState(0);\n\n    const next = () => {\n        if (!respond) {\n            //navigate('/newpatient/images/response');\n            navigate('/setreminder');\n        } else {\n            dispatch(actions.setPatientPictureScore(score));\n            navigate('/listpatients')\n        }\n    }\n    const prev = () => {\n        if (respond) {\n            navigate('/newpatient/images');\n        } else {\n            navigate('/newpatient/')\n        }\n    }\n\n    const callback = (state: boolean) => {\n        if (state) {\n            setScore(Math.min(3, score+1))\n        } else {\n            setScore(Math.max(0, score-1))\n        }\n        \n    }\n\n    if (respond) {\n        console.log(\"score\", score);\n        return (\n            <div className='image-question'>\n                <p>Touch the images recalled correctly</p>\n            <div className='image-grid'>\n                <ImageBlock label=\"cup\" image={cup} respond={respond} callback={callback}/>\n                <ImageBlock label=\"keys\" image={keys} respond={respond} callback={callback}/>\n                <ImageBlock label=\"bird\" image={bird} respond={respond} callback={callback}/>\n            </div>\n            <Row >\n                <Col><Button  onClick={prev}>Prev</Button></Col>\n                <Col><Button  onClick={next}>Next</Button></Col>\n            </Row>\n            </div>\n        )\n    } else {\n        return (\n            <div className='image-question'> \n                <p>Remember these images.</p>\n            <div className='image-grid'>\n                <ImageBlock label=\"cup\" image={cup} />\n                <ImageBlock label=\"keys\" image={keys} />\n                <ImageBlock label=\"bird\" image={bird} />\n            </div>\n            <Row >\n                <Col><Button  onClick={prev}>Prev</Button></Col>\n                <Col><Button  onClick={next}>Next</Button></Col>\n            </Row>\n            </div>\n        )\n    }\n}\n\n\nexport default ImageQuestion;","import { navigate } from '@reach/router';\nimport { useState } from 'react';\nimport {RouteComponentProps} from '@reach/router';\nimport {Input, Button} from 'react-onsenui';\nimport {useDispatch} from 'react-redux';\nimport {Patient} from '../../types';\nimport * as actions from '../../redux/patients';\nimport './NewPatient.css'\n\nconst NewPatient = (props: RouteComponentProps) => {\n\n    const dispatch = useDispatch();\n    //const patients = useSelector(state => state);\n\n    const newPatient: Patient = {\n        name: '',\n        location: '',\n        questions: [],\n        pictures: 0,\n        reminder: 0\n    }\n\n    const [patient, setPatient] = useState(newPatient)\n\n    const onClick = (event: any) => {\n        dispatch(actions.addPatient(patient))\n        navigate('/newpatient/questions')\n    }\n\n    return (\n        <div className=\"new-patient-form\">\n                <div className='form-row'>\n                    <Input\n                        value={patient.name} float\n                        onChange={(event: any) => { setPatient({...patient, name: event.target.value})} }\n                        placeholder='Patient Name' /> \n                \n                </div>\n                <div className='form-row'>\n                    <Input\n                        value={patient.location} float\n                        onChange={(event: any) => { setPatient({...patient, location: event.target.value})} }\n                        placeholder='Location' /> \n                </div>\n                <div className='form-row'>\n                    <Button onClick={onClick}>Next</Button>\n                </div>\n        </div>\n    )\n\n}\n\nexport default NewPatient;","import React from 'react';\nimport {Icon} from 'react-onsenui';\nimport './BinaryChoice.css'\n\nconst BinaryChoice = ({callback, value}: any) => {\n\n  const onClick = (val: boolean) => {\n    callback(val);\n  }\n\n  let yesclass = value?'selected':'';\n  let noclass = value?'':'selected';\n  if (typeof(value) === 'undefined') {\n    noclass = '';\n  }\n\n  return (\n\n      <div>   \n        <div className=\"binaryChoiceContainer\">\n          <div className={\"binary-choice-button yes-button \" + yesclass} onClick={() => onClick(true)}>\n            <Icon size={{default: 120}} icon='check' />\n          </div>\n          <div className={\"binary-choice-button no-button \" + noclass} onClick={() => onClick(false)}>\n            <Icon size={{default: 120}} icon='close' />\n          </div>\n        </div>\n      </div> \n\n\n\n\n  );\n};\n\nexport default BinaryChoice;","\nimport {Col, Row, Icon} from 'react-onsenui';\nimport {RouteComponentProps} from '@reach/router';\nimport {useSelector} from 'react-redux';\nimport {StateType, Patient} from '../../types'; \nimport './PatientStatus.css'\n\nconst PatientStatus = (props: RouteComponentProps) => {\n\n    const patient: Patient = useSelector<StateType, Patient>(state => state.patients[state.currentPatient])\n\n    return (\n        <Row className=\"patient-report\">\n            {patient.questions.map((q:boolean, idx: number) => {\n                return (\n                <Col key={idx} className=\"patient-report-item\">\n                    <div className={`tick-cross ${q?\"tick\":\"cross\"}`}>\n                        <Icon icon={q?\"check\":\"close\"} />\n                    </div>\n                </Col> \n                )\n            })}\n            \n            <Col>\n                <div className={`tick-cross ${patient.pictures===3?\"tick\":\"cross\"}`}>\n                    <div className=\"picture-score\">{patient.pictures}</div>\n                </div>\n            </Col>\n        </Row>\n    )\n}\n\nexport default PatientStatus;","import { navigate, RouteComponentProps } from '@reach/router';\nimport React, { useState } from 'react';\nimport {Button, Row, Col} from 'react-onsenui';\nimport BinaryChoice from '../binaryChoice/BinaryChoice';\nimport PatientStatus from '../patientStatus/PatientStatus';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Patient, StateType} from '../../types';\nimport * as actions from '../../redux/patients';\nimport './Question.css'\n\nconst YesNoQuestion = ({question, answer, next, prev, value}: any) => {\n\n  const onChange = (v: boolean) => {\n      answer(v);\n  }\n\n  return (\n      <div className='binaryChoice'>\n        <div id='question-text'>\n          <div id='request'>Ask the patient:</div>\n          <div id='question'>{question.text}</div>\n          <div id='hint'>{question.hint}</div>\n        </div>\n        <BinaryChoice callback={onChange} value={value} />\n        <Row >\n          <Col><Button  onClick={prev}>Prev</Button></Col>\n          <Col><Button  onClick={next}>Next</Button></Col>\n        </Row>\n        <PatientStatus />\n      </div>\n  );\n};\n\nconst Questions = (props: RouteComponentProps) => {\n\n  const dispatch = useDispatch()\n  const patient: Patient = useSelector((state: StateType) => {\n      console.log(state);\n      return state.patients[state.currentPatient];\n  });\n\n  const questions = [ \n    {text: \"What is your name?\", hint: \"Patient must provide thier full name.\"}, \n    {text: \"What is the name of this place?\", hint: \"Patient must be able to give the name of e.g. sports field\"}, \n    {text: \"Why are you here?\", hint: \"Patient must know why they were admitted to hospital\"}, \n    {text: \"What is the month?\", hint: \"Patient must name the month\"}, \n    {text: \"What is the year?\", hint: \"Ok if the response is '21' or '2021'\"}\n    ]\n\n  console.log(patient);\n  let initialQuestions = Array<boolean>(5);\n  if (patient) {\n    initialQuestions = patient.questions;\n  }\n\n  const [response, setResponse]= useState(initialQuestions)\n  const [question, setQuestion] = useState(0)\n\n  const next = () => {\n    if (question + 1 < questions.length) {\n      setQuestion(question + 1)\n    } else {\n      navigate('/newpatient/images');\n    }\n  }\n\n  const prev = () => {\n    if (question > 0) {\n      setQuestion(question - 1)\n    } \n  }\n\n  const answerQuestion = (answer: boolean) => {\n    const newResponse = response.slice()\n    newResponse[question] = answer;\n    setResponse(newResponse)\n    patient.questions = newResponse;\n    console.log(patient.questions);\n    dispatch(actions.updatePatient(patient));\n  }\n  console.log(patient);\n  console.log(\"QQ\", response, question);\n\n  if (patient) {\n    return (<YesNoQuestion answer={answerQuestion} \n                          question={questions[question]} \n                          value={response[question]}\n                          next={next} prev={prev}/>)\n    } else { \n      return (<p>Hmmm..</p>)\n    }\n  }\n\nexport default Questions;","import { navigate } from '@reach/router';\nimport {RouteComponentProps} from '@reach/router';\nimport {ListItem, List} from 'react-onsenui';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {StateType, Patient} from '../../types';\nimport * as actions from '../../redux/patients';\n\n\nconst PatientList = (props: RouteComponentProps) => {\n\n    const dispatch = useDispatch();\n    const state: StateType = useSelector<StateType, StateType>(state => state)\n\n    const onClick = (idx: number | undefined) => {\n        if (typeof(idx) != \"undefined\") {\n            dispatch(actions.selectPatient(idx));\n            navigate('/patientreport');\n        }  \n    }\n\n    const renderRow = (row: Patient, idx?: number | undefined) => {\n        let reminder = (row.reminder - Date.now())/60000;\n        if (reminder < 0) {\n            reminder = 0;\n        }\n        return (<ListItem key={idx} onClick={() => onClick(idx)}>\n            <div className=\"left\">{row.name}</div> \n            <div className=\"center\">{row.location}</div>\n            <div className=\"right\">{(reminder/60).toFixed(0)}h {(reminder % 60).toFixed()}m</div>\n            </ListItem>);\n    }\n\n    return (\n        <List\n            dataSource={state.patients}\n            renderRow={renderRow}>\n            </List>\n    )\n\n}\n\nexport default PatientList;","import {navigate, RouteComponentProps} from '@reach/router';\nimport {useSelector} from 'react-redux';\nimport {Button, Row, Col} from 'react-onsenui';\nimport {StateType, Patient} from '../../types'; \nimport PatientStatus from '../patientStatus/PatientStatus';\nimport './PatientReport.css';\n\n\nconst PatientReport = (props: RouteComponentProps) => {\n\n    const patient: Patient = useSelector<StateType, Patient>(state => state.patients[state.currentPatient])\n\n    let reminder = (patient.reminder - Date.now())/60000;\n    // if reminder is in the past, we just display 0h, 0m\n    if (reminder < 0) {\n        reminder = 0;\n    }\n\n    return (\n        <div>\n            <p>Patient report for <strong>{patient.name}</strong> at <strong>{patient.location}</strong></p>\n\n            <p>Time to recall test</p>\n            <div className=\"reminder\">{(reminder/60).toFixed(0)}h {(reminder % 60).toFixed()}m</div>\n\n            <Col>\n                <Row><PatientStatus /></Row>\n                <Row><Button onClick={() => {navigate(\"/newpatient/questions\")}}>Update Answers</Button></Row>\n                <Row><Button onClick={() => {navigate(\"/setreminder\")}}>Set Reminder</Button></Row>\n            </Col>\n        </div>\n    )\n\n}\n\nexport default PatientReport;","\nimport {Col, Row, Button} from 'react-onsenui';\nimport {navigate, RouteComponentProps} from '@reach/router';\nimport {useDispatch} from 'react-redux';\nimport * as actions from '../../redux/patients';\n\n\nconst SetReminder = (props: RouteComponentProps) => {\n\n    const dispatch = useDispatch();\n    \n    const setTimer = (minutes: number) => {\n        dispatch(actions.setPatientTimer(minutes));\n        navigate('/listpatients')\n    }\n\n    return (\n        <div className=\"set-reminder\">\n\n            <p>Set a reminder for the image memory test.</p>\n\n        <Col width=\"50%\">\n            <Row>\n                <Button onClick={() => setTimer(15)}>15 Minutes</Button>\n            </Row>\n            <Row>\n                <Button onClick={() => setTimer(30)}>30 Minutes</Button>\n            </Row>\n            <Row>\n                <Button onClick={() => setTimer(45)}>45 Minutes</Button>\n            </Row>\n            <Row>\n                <Button onClick={() => setTimer(60)}>1 hour</Button>\n            </Row>\n        </Col>\n        </div>\n    )\n}\n\n\nexport default SetReminder;","import React from 'react'; \nimport {Router, Link} from '@reach/router';\nimport {Page, Toolbar, Icon} from 'react-onsenui'\n\n\nimport './App.css';\n\nimport 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\n\nimport Home from './components/home/Home';\nimport ImageQuestion from './components/imageQuestion/ImageQuestion';\nimport NewPatient from './components/newPatient/NewPatient';\nimport Questions from './components/question/Question';\nimport PatientList from './components/patientList/PatientList';\nimport PatientReport from './components/patientReport/PatientReport';\nimport SetReminder from './components/setReminder/SetReminder';\n\n\nfunction App() {\n\n  return (\n    <Page renderToolbar={() => \n      <Toolbar>\n        <div className='left'>\n        <Link to=\"/\"><Icon  icon='home' /></Link>\n        </div>\n        <div className='center'>\n          A-WPTAS\n        </div>\n        <div className='right'>\n          &nbsp;\n        </div>\n      </Toolbar>\n    }>\n      <Router>\n        <Home path=\"/\" />\n        <NewPatient path=\"/newpatient\" />\n        <Questions path=\"/newpatient/questions\" />\n        <ImageQuestion respond={false} path=\"/newpatient/images\" />\n        <ImageQuestion respond={true} path=\"/newpatient/images/response\" />\n        <PatientList path=\"/listpatients\" />\n        <PatientReport path=\"/patientreport\" />\n        <SetReminder path=\"/setreminder\" />\n      </Router>\n      \n    </Page>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, applyMiddleware } from 'redux';\nimport patientReducer from './patients';\nimport {StateType} from '../types';\n\nconst middlewares = [];\n \nif (process.env.NODE_ENV === `development`) {\n  const { logger } = require(`redux-logger`);\n  middlewares.push(logger);\n}\n\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore); \n\n// get saved content from localStorage\nlet preloadedState: StateType;\nconst persistedStateString = localStorage.getItem('state');\nif (persistedStateString) {\n  preloadedState= JSON.parse(persistedStateString);\n  if (!preloadedState.patients || typeof(preloadedState.currentPatient) === \"undefined\") {\n    preloadedState = {patients: [], currentPatient: -1};\n  }\n}\n\n\nconst configureStore = () => createStoreWithMiddleware(patientReducer, preloadedState);\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './redux/configureStore';\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\n\n/* this gives many warnings...\n <React.StrictMode>\n    <App />\n  </React.StrictMode>\n*/\n\nReactDOM.render(\n  <Provider store={store}>\n   <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}